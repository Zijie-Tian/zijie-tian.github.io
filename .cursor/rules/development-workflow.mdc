---
description:
globs:
alwaysApply: false
---
# 开发工作流知识库

## 项目初始化和环境设置

### 环境要求
- **操作系统**: macOS (darwin 24.5.0)
- **Shell**: /bin/zsh
- **Node.js**: 版本 20 (通过 nvm 管理)
- **包管理器**: pnpm (不使用 npm 或 yarn)

### 初始化步骤
```bash
# 1. 安装 nvm 和 Node.js
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
source ~/.zshrc
nvm install 20
nvm use 20

# 2. 安装 pnpm
npm install -g pnpm

# 3. 克隆项目并安装依赖
git clone <repository-url>
cd zijie-tian.github.io
pnpm install

# 4. 安装图像处理库
pnpm add sharp

# 5. 启动开发服务器
pnpm dev
```

## 开发命令参考

### 基本命令
```bash
# 开发服务器 (http://localhost:4321)
pnpm dev

# 构建项目
pnpm build

# 预览构建结果
pnpm preview

# 清理缓存和构建文件
rm -rf dist .astro node_modules/.astro
```

### 部署命令
```bash
# GitHub Pages 部署 (通过 Actions 自动触发)
git push origin main

# Vercel 部署
vercel --prod

# 手动构建并推送到 gh-pages
pnpm build
# 然后手动推送 dist/ 内容到 gh-pages 分支
```

## 代码质量和最佳实践

### 文件结构规范
```
src/
├── config.ts              # 主配置文件
├── content/
│   └── posts/             # 博客文章
├── components/            # 组件
├── layouts/              # 布局
├── pages/                # 页面
└── styles/               # 样式文件
```

### 配置文件管理
- **主配置**: [src/config.ts](mdc:src/config.ts) - 网站核心配置
- **Astro配置**: [astro.config.mjs](mdc:astro.config.mjs) - 框架配置
- **包配置**: [package.json](mdc:package.json) - 依赖和脚本
- **TypeScript**: [tsconfig.json](mdc:tsconfig.json) - TypeScript配置

### Git 工作流
```bash
# 标准工作流
git add .
git commit -m "feat: 添加新功能"
git push origin main

# 分支管理
git checkout -b feature/new-feature
# 开发完成后
git checkout main
git merge feature/new-feature
```

## 性能优化

### 图像优化
- 使用 `sharp` 库进行图像处理
- 支持 WebP 格式自动转换
- 响应式图像加载

### 构建优化
```bash
# 检查构建大小
pnpm build
du -sh dist/

# 分析构建产物
pnpm astro build --verbose
```

### 缓存策略
- 静态资源自动添加哈希
- CDN 缓存优化 (Vercel)
- 浏览器缓存配置

## 调试和故障排除

### 常见问题解决
1. **依赖问题**: 删除 `node_modules` 重新安装
2. **缓存问题**: 清理 `.astro` 目录
3. **构建失败**: 检查 TypeScript 错误
4. **样式问题**: 检查 Tailwind CSS 配置

### 调试工具
```bash
# 检查 Astro 版本
pnpm astro --version

# 检查依赖
pnpm list

# 检查 TypeScript
pnpm astro check

# 详细构建日志
pnpm build --verbose
```

### 日志分析
- **开发服务器**: 控制台输出
- **构建日志**: GitHub Actions 日志
- **部署日志**: Vercel 控制台

## 主题定制

### Fuwari 主题配置
- **颜色主题**: 在 [src/config.ts](mdc:src/config.ts) 中设置 `hue: 200` (青色)
- **字体配置**: Tailwind CSS 字体栈
- **布局调整**: 修改组件和布局文件

### 样式定制
```css
/* 自定义样式 */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* 主题色彩变量 */
:root {
  --hue: 200;
}
```

## 内容管理工作流

### 文章创建流程
1. 在 `src/content/posts/` 创建新 `.md` 文件
2. 添加正确的 frontmatter
3. 编写内容
4. 本地预览测试
5. 提交并推送

### 内容审查清单
- [ ] 标题和描述准确
- [ ] 标签分类正确
- [ ] 图片路径有效
- [ ] 语法检查通过
- [ ] 本地预览正常

## 部署策略

### 双平台部署
1. **GitHub Pages**: 主要部署平台，免费
2. **Vercel**: 备用平台，性能更好

### 部署检查清单
- [ ] 构建成功
- [ ] 静态资源路径正确
- [ ] 网站可访问
- [ ] 内容显示正常
- [ ] 移动端适配

### 回滚策略
- GitHub Pages: 回滚到之前的 commit
- Vercel: 使用 Vercel 控制台一键回滚

## 监控和维护

### 定期检查项目
- 依赖更新 (`pnpm update`)
- 安全漏洞扫描
- 性能监控
- 链接有效性检查

### 备份策略
- Git 仓库作为主要备份
- 定期导出内容
- 配置文件版本控制

## 协作开发

### 代码规范
- 使用 TypeScript 严格模式
- 遵循 Astro 最佳实践
- 保持代码简洁和可读性

### 文档维护
- 及时更新 README
- 记录重要变更
- 维护部署文档
