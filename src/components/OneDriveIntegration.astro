---
// OneDrive Integration Component
interface Props {
	folderPath?: string;
	clientId?: string;
}

const {
	folderPath = "/Blog",
	clientId = "4b36a6d5-66ae-4656-9b1f-d73b9a4f2163",
} = Astro.props;
---

<div id="onedrive-container" class="onedrive-container max-w-6xl mx-auto p-6" data-client-id={clientId} data-folder-path={folderPath}>
  <div class="text-center mb-8">
    <h2 class="text-3xl font-bold text-gray-800 mb-2">📁 OneDrive 文件管理</h2>
    <p class="text-gray-600">连接你的OneDrive，管理和分享文件</p>
  </div>
  
  <!-- 登录状态显示 -->
  <div id="auth-section" class="mb-8">
    <div id="login-button" class="hidden">
      <div class="auth-section">
        <div class="mb-4">
          <div class="text-4xl mb-3">☁️</div>
          <h3 class="text-xl font-semibold mb-2">连接到 OneDrive</h3>
          <p class="text-blue-100 mb-6">登录你的Microsoft账户以访问OneDrive文件</p>
        </div>
        <button 
          id="sign-in-btn" 
          class="sign-in-btn"
        >
          🔐 登录 Microsoft 账户
        </button>
      </div>
    </div>
    
    <div id="user-info" class="hidden">
      <div class="bg-white rounded-lg shadow-md p-4 flex items-center justify-between">
        <div class="flex items-center space-x-3">
          <div class="user-avatar w-10 h-10 rounded-full flex items-center justify-center text-white font-semibold">
            <span id="user-initial">U</span>
          </div>
          <div>
            <p class="font-medium text-gray-800" id="user-name">已登录用户</p>
            <p class="text-sm text-gray-500">OneDrive 已连接</p>
          </div>
        </div>
        <button 
          id="sign-out-btn" 
          class="text-sm text-red-600 hover:text-red-800 px-3 py-1 border border-red-200 rounded-md hover:bg-red-50 transition-colors"
        >
          退出登录
        </button>
      </div>
    </div>
  </div>

  <!-- 文件列表 -->
  <div id="files-section" class="hidden">
    <div class="bg-white rounded-lg shadow-md p-6 mb-6">
      <div class="flex items-center justify-between mb-6">
        <div>
          <h3 class="text-xl font-semibold text-gray-800 flex items-center">
            <span class="mr-2">📂</span>
            <span id="current-folder">文件列表</span>
          </h3>
          <p class="text-sm text-gray-500 mt-1">当前路径: <span id="folder-path">/Blog</span></p>
        </div>
        <div class="flex space-x-2">
          <button 
            id="refresh-btn" 
            class="bg-blue-50 hover:bg-blue-100 text-blue-600 px-3 py-2 rounded-md text-sm font-medium transition-colors flex items-center"
          >
            🔄 刷新
          </button>
        </div>
      </div>
      
      <div id="loading" class="hidden text-center py-12">
        <div class="loading-spinner inline-block w-8 h-8 border-2 rounded-full"></div>
        <p class="mt-4 text-gray-600 font-medium">正在加载文件...</p>
        <p class="text-sm text-gray-400">请稍候</p>
      </div>
      
      <div id="files-list" class="file-grid"></div>
      
      <div id="empty-folder" class="hidden text-center py-12">
        <div class="text-6xl mb-4">📭</div>
        <h4 class="text-lg font-medium text-gray-600 mb-2">文件夹为空</h4>
        <p class="text-gray-400">这个文件夹中还没有任何文件</p>
      </div>
    </div>
    
    <div id="error-message" class="hidden error-message rounded-lg p-4 mt-4">
      <div class="flex items-center">
        <span class="text-2xl mr-3">⚠️</span>
        <div>
          <h4 class="font-medium text-red-800">出现错误</h4>
          <p class="text-red-700 text-sm"></p>
        </div>
      </div>
    </div>
  </div>
</div>

<script is:inline>
  // OneDrive 集成脚本
  class OneDriveManager {
    constructor(clientId, folderPath) {
      this.clientId = clientId;
      this.folderPath = folderPath;
      this.accessToken = null;
      this.init();
    }

    init() {
      // 检查是否已有访问令牌
      this.accessToken = localStorage.getItem('onedrive_access_token');
      
      if (this.accessToken) {
        this.showUserInfo();
        this.loadFiles();
      } else {
        this.showLoginButton();
      }

      // 绑定事件
      this.bindEvents();
    }

    bindEvents() {
      const signInBtn = document.getElementById('sign-in-btn');
      const signOutBtn = document.getElementById('sign-out-btn');
      const refreshBtn = document.getElementById('refresh-btn');

      if (signInBtn) {
        signInBtn.addEventListener('click', () => this.signIn());
      }

      if (signOutBtn) {
        signOutBtn.addEventListener('click', () => this.signOut());
      }

      if (refreshBtn) {
        refreshBtn.addEventListener('click', () => this.loadFiles());
      }
    }

    showLoginButton() {
      document.getElementById('login-button').classList.remove('hidden');
      document.getElementById('user-info').classList.add('hidden');
      document.getElementById('files-section').classList.add('hidden');
    }

    showUserInfo() {
      document.getElementById('login-button').classList.add('hidden');
      document.getElementById('user-info').classList.remove('hidden');
      document.getElementById('files-section').classList.remove('hidden');
      
      // 这里可以调用Microsoft Graph API获取用户信息
      // 暂时显示占位符
      document.getElementById('user-initial').textContent = 'U';
      document.getElementById('user-name').textContent = '已登录用户';
    }

    signIn() {
      // 构建Microsoft OAuth2 授权URL
      const authUrl = new URL('https://login.microsoftonline.com/common/oauth2/v2.0/authorize');
      authUrl.searchParams.set('client_id', this.clientId);
      authUrl.searchParams.set('response_type', 'token');
      authUrl.searchParams.set('redirect_uri', window.location.origin + window.location.pathname);
      authUrl.searchParams.set('scope', 'Files.Read.All Files.ReadWrite.All User.Read');
      authUrl.searchParams.set('response_mode', 'fragment');

      // 重定向到Microsoft登录页面
      window.location.href = authUrl.toString();
    }

    signOut() {
      localStorage.removeItem('onedrive_access_token');
      this.accessToken = null;
      this.showLoginButton();
    }

    async loadFiles() {
      if (!this.accessToken) {
        this.showLoginButton();
        return;
      }

      this.showLoading(true);
      this.hideError();

      try {
        const response = await fetch(`/api/onedrive?access_token=${encodeURIComponent(this.accessToken)}&folder_path=${encodeURIComponent(this.folderPath)}`);
        const data = await response.json();

        if (data.success) {
          this.displayFiles(data.files);
        } else {
          this.showError(data.message || '获取文件失败');
        }
      } catch (error) {
        console.error('Error loading files:', error);
        this.showError('网络错误，请稍后重试');
      } finally {
        this.showLoading(false);
      }
    }

    displayFiles(files) {
      const filesList = document.getElementById('files-list');
      const emptyFolder = document.getElementById('empty-folder');
      
      filesList.innerHTML = '';

      if (files.length === 0) {
        emptyFolder.classList.remove('hidden');
        filesList.classList.add('hidden');
        return;
      }

      emptyFolder.classList.add('hidden');
      filesList.classList.remove('hidden');

      files.forEach(file => {
        const fileElement = this.createFileElement(file);
        filesList.appendChild(fileElement);
      });
      
      // 更新文件夹路径显示
      document.getElementById('folder-path').textContent = this.folderPath;
    }

    createFileElement(file) {
      const div = document.createElement('div');
      div.className = 'file-item p-4 rounded-lg cursor-pointer';
      
      const icon = file.isFolder ? '📁' : this.getFileIcon(file.name);
      const size = file.size ? this.formatFileSize(file.size) : '';
      const date = new Date(file.lastModifiedDateTime).toLocaleDateString('zh-CN', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
      });

      div.innerHTML = `
        <div class="flex items-start space-x-3">
          <div class="file-icon flex-shrink-0 mt-1">
            ${icon}
          </div>
          <div class="flex-1 min-w-0">
            <h4 class="font-medium text-gray-900 truncate mb-1">${file.name}</h4>
            <div class="flex items-center text-xs text-gray-500 space-x-2">
              ${file.isFolder ? `
                <span class="bg-blue-100 text-blue-800 px-2 py-1 rounded-full">
                  📁 文件夹
                </span>
                ${file.childCount ? `<span>${file.childCount} 项</span>` : ''}
              ` : `
                ${size ? `<span class="bg-gray-100 text-gray-700 px-2 py-1 rounded-full">${size}</span>` : ''}
                <span>📅 ${date}</span>
              `}
            </div>
          </div>
          <div class="flex-shrink-0">
            ${!file.isFolder ? `
              <a href="${file.webUrl}" target="_blank" 
                 class="inline-flex items-center px-3 py-1 bg-blue-50 hover:bg-blue-100 text-blue-600 text-xs font-medium rounded-md transition-colors"
                 onclick="event.stopPropagation()">
                <span class="mr-1">👁️</span>
                查看
              </a>
            ` : `
              <div class="text-gray-400 text-xs">
                <span>📂</span>
              </div>
            `}
          </div>
        </div>
      `;

      // 添加点击事件（未来可以用于文件夹导航）
      if (file.isFolder) {
        div.addEventListener('click', () => {
          console.log('点击文件夹:', file.name);
          // 这里可以添加文件夹导航功能
        });
      }

      return div;
    }

    getFileIcon(filename) {
      const ext = filename.toLowerCase().split('.').pop();
      const iconMap = {
        'md': '📝', 'txt': '📄', 'pdf': '📕', 'doc': '📘', 'docx': '📘',
        'xls': '📗', 'xlsx': '📗', 'ppt': '📙', 'pptx': '📙',
        'jpg': '🖼️', 'jpeg': '🖼️', 'png': '🖼️', 'gif': '🖼️',
        'mp4': '🎬', 'avi': '🎬', 'mov': '🎬',
        'mp3': '🎵', 'wav': '🎵', 'flac': '🎵',
        'zip': '📦', 'rar': '📦', '7z': '📦'
      };
      return iconMap[ext] || '📄';
    }

    formatFileSize(bytes) {
      if (bytes === 0) return '0 B';
      const k = 1024;
      const sizes = ['B', 'KB', 'MB', 'GB'];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
    }

    showLoading(show) {
      const loading = document.getElementById('loading');
      if (show) {
        loading.classList.remove('hidden');
      } else {
        loading.classList.add('hidden');
      }
    }

    showError(message) {
      const errorDiv = document.getElementById('error-message');
      const errorText = errorDiv.querySelector('p');
      errorText.textContent = message;
      errorDiv.classList.remove('hidden');
      
      // 自动隐藏错误消息
      setTimeout(() => {
        errorDiv.classList.add('hidden');
      }, 5000);
    }

    hideError() {
      document.getElementById('error-message').classList.add('hidden');
    }
  }

  // 页面加载完成后初始化
  document.addEventListener('DOMContentLoaded', () => {
    // 检查URL片段中是否有访问令牌（OAuth回调）
    const hash = window.location.hash;
    if (hash.includes('access_token=')) {
      const params = new URLSearchParams(hash.substring(1));
      const accessToken = params.get('access_token');
      if (accessToken) {
        localStorage.setItem('onedrive_access_token', accessToken);
        // 清除URL中的令牌信息
        window.location.hash = '';
      }
    }

    // 初始化OneDrive管理器
    const clientId = document.querySelector('#onedrive-container').dataset.clientId || 'YOUR_CLIENT_ID';
    const folderPath = document.querySelector('#onedrive-container').dataset.folderPath || '/Blog';
    
    new OneDriveManager(clientId, folderPath);
  });
</script>

<style>
  .onedrive-container {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  }
  
  .file-item {
    transition: all 0.3s ease;
    border: 1px solid #e5e7eb;
    background: linear-gradient(135deg, #ffffff 0%, #f9fafb 100%);
  }
  
  .file-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    border-color: #3b82f6;
  }
  
  .file-icon {
    font-size: 1.5rem;
    filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.1));
  }
  
  .auth-section {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 12px;
    padding: 2rem;
    color: white;
    text-align: center;
  }
  
  .sign-in-btn {
    background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
    border: none;
    padding: 12px 24px;
    border-radius: 8px;
    color: white;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(79, 70, 229, 0.3);
  }
  
  .sign-in-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(79, 70, 229, 0.4);
  }
  
  .user-avatar {
    background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
    box-shadow: 0 4px 15px rgba(59, 130, 246, 0.3);
  }
  
  .loading-spinner {
    border-color: #e5e7eb;
    border-top-color: #3b82f6;
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }
  
  .error-message {
    background: linear-gradient(135deg, #fef2f2 0%, #fee2e2 100%);
    border: 1px solid #fca5a5;
    animation: slideIn 0.3s ease-out;
  }
  
  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .file-grid {
    display: grid;
    gap: 1rem;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  }
  
  @media (max-width: 768px) {
    .file-grid {
      grid-template-columns: 1fr;
    }
    
    .onedrive-container {
      padding: 1rem;
    }
  }
</style> 